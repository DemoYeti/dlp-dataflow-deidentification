name: Java CI with Gradle

on:
  push:
    branches:
      - ci-workflow-testing

env:
  PROJECT_ID: "dlp-dataflow-deid-ci-392604"
  DATASET_ID: "demo_dataset"
  GCS_BUCKET: "dlp-dataflow-deid-ci-392604-demo-data"
  TABLE_ID: "CCRecords_1564602825"
  INSPECT_TEMPLATE_PATH: "projects/dlp-dataflow-deid-ci-392604/locations/global/inspectTemplates/dlp-demo-inspect-latest-1689137435622"
  DEID_TEMPLATE_PATH: "projects/dlp-dataflow-deid-ci-392604/locations/global/deidentifyTemplates/dlp-demo-deid-latest-1689137435622"
  SERVICE_ACCOUNT_EMAIL: "demo-service-account@dlp-dataflow-deid-ci-392604.iam.gserviceaccount.com"

jobs:
  run-and-verify:
    runs-on:
      - self-hosted
      - test-runner-chitara01

    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run DLP Pipeline
        run: |
          gradle run -DmainClass=com.google.swarm.tokenization.DLPTextToBigQueryStreamingV2 -Pargs=" \
                --region=us-central1 \
                --project=${{env.PROJECT_ID}} \
                --tempLocation=gs://${{env.GCS_BUCKET}}/temp \
                --numWorkers=2 \
                --maxNumWorkers=3 \
                --runner=DataflowRunner \
                --filePattern=gs://${{env.GCS_BUCKET}}/*.csv \
                --dataset=${{env.DATASET_ID}} \
                --inspectTemplateName=${{env.INSPECT_TEMPLATE_PATH}} \
                --deidentifyTemplateName=${{env.DEID_TEMPLATE_PATH}} \
                --batchSize=200000 \
                --DLPMethod=DEID \
                --serviceAccount=${SERVICE_ACCOUNT_EMAIL}"

      - name: Verify BQ tables
        run: |
          not_verified=true
          table_count=0
          while $not_verified; do
            table_count=$(($(bq query --use_legacy_sql=false --format csv 'SELECT * FROM `${{env.PROJECT_ID}}.${{env.DATASET_ID}}`.__TABLES__ WHERE table_id=${{env.TABLE_ID}}' | wc -l ) -1))
            if [[ "$table_count" == "1" ]]; then
              echo "PASSED"; 
              not_verified=false;
            else
              sleep 5m
            fi
          done
          echo "Verified number of tables in BQ with id ${{env.TABLE_ID}}: $table_count ."

      - name: Verify distinct rows
        run: |
          rc_orig=$(($(gcloud storage cat gs://${{env.GCS_BUCKET}}/${{env.TABLE_ID}}.csv | wc -l ) -1))
          not_verified=true
          row_count=0
          while $not_verified; do
            row_count_json=$(bq query --use_legacy_sql=false --format json 'SELECT COUNT(DISTINCT(ID)) FROM `${{env.PROJECT_ID}}.${{env.DATASET_ID}}.${{env.TABLE_ID}}`')
            row_count=$(echo "$row_count_json" | jq -r '.[].f0_')
            if [[ "$row_count" == "$rc_orig" ]]; then 
              echo "PASSED"; 
              not_verified=false;
            else
              sleep 5m
            fi
          done
          echo "# records in input CSV file are: $rc_orig."
          echo "Verified number of rows in ${{env.TABLE_ID}}: $row_count."
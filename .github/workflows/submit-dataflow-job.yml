on:
  workflow_call:
    inputs:
      project_id:
        required: true
        type: string
      input_gcs_bucket:
        required: true
        type: string
      dataset:
        required: true
        type: string
      inspect_template:
        required: true
        type: string
      deid_template:
        required: true
        type: string
      uuid:
        required: true
        type: string
    outputs:
      job_id:
        description: "Job id of deid pipeline"
        value: ${{ jobs.run-pipeline.outputs.job_id }}

jobs:
  run-pipeline:
    runs-on:
      - self-hosted

    outputs:
      job_id: ${{ steps.get-job-id.outputs.job_id}}
    steps:
    - uses: actions/checkout@v2

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: 17

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: Run DLP Pipeline
      run: |
            ./gradlew run -DmainClass=com.google.swarm.tokenization.DLPTextToBigQueryStreamingV2 -Pargs=" \
                  --region=us-central1 \
                  --project=${{inputs.project_id}} \
                  --tempLocation=gs://${{inputs.input_gcs_bucket}}/temp \
                  --numWorkers=2 \
                  --maxNumWorkers=3 \
                  --runner=DataflowRunner \
                  --filePattern=gs://${{inputs.input_gcs_bucket}}/*.csv \
                  --dataset=${{inputs.dataset}} \
                  --workerMachineType=n1-highmem-4 \
                  --inspectTemplateName=${{inputs.inspect_template}} \
                  --deidentifyTemplateName=${{inputs.deid_template}} \
                  --batchSize=200000 \
                  --DLPMethod=DEID \
                  --serviceAccount=demo-service-account@dlp-dataflow-deid-ci-392604.iam.gserviceaccount.com \
                  --jobName=load-test-${{inputs.uuid}} "

    - name: Get Job ID
      id: get-job-id
      run: |
          deid_job_data=$(gcloud dataflow jobs list --project ${{inputs.project_id}} --status active --format json --filter="name=load-test-${{inputs.uuid}}")
          deid_job_id=$(echo "$deid_job_data" | jq -r '.[].id')
          echo "job_id=$deid_job_id" >> $GITHUB_OUTPUT   

    - name: Poll till job finishes
      uses: ./.github/workflows/poll-job
      with:
        job_id: ${{ steps.get-job-id.outputs.job_id }}
        region: "us-central1"


#    - name: Fetch metrics
#      uses: ./.github/workflows/fetch-metrics
#      with:
#        job_id: "${{ steps.get-job-id.outputs.job_id }}"
#        region: "us-central1"


            
    
